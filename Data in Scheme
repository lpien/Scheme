;part 1
(list 1 2 3)
(list 1 2 3 4 5 6 7 8)
(define list1 (list 0 1 2 3 4 5 6 7 8 9))
(display list1)
(list "abe" "bea" "cal" "deb")
(define bintree (list (list 1 2) (list 3 4)))
(display bintree)
(define array3x3 (list (list 1 2 3) (list 4 5 6) (list 7 8 9)))
(display array3x3)
(list)
(null? (list))
(null? (list 1 2 3))

;part 2
(car (list 1 2 3))
(cdr (list 1 2 3))
(define list3 (list 0 1 2 3 4 5 6 7 8 9))
(display list3)
(car list3)
(cdr list3)
(cdr(cdr list3))
(cdr(cdr(cdr list3)))
(car(cdr(cdr(cdr list3))))
(display list3)
(cdr list3)
(cddr list3)
(cdddr list3)
(car(cdddr list3))
(cadddr list3)

(define list4(list
              (list(list 1 2) (list 3 4) (list 5 6))
              (list (list 7 8) (list 9 10) (list 11 12))
              (list (list 13 14) (list 15 16) (list 17 18))
              )
  )
(display list4)
(car list4)
(caar list4)
(caaar list4)
(cdr list4)
(cadr list4)
(cdar list4)
(cdadr list4)
(cadar list4)

;part 3
(cons 1 '(2))
(car (cons 1 '(2)))
(cdr (cons 1 '(2)))
(define list6 (cons (cons 1 '(2)) '(cons 3 4)))
(display list6)
(car list6)
(cdr list6)
(caar list6)
(cadr list6)
(cdar list6)
(cddr list6)
(cons 1 '())
;(cons () 1)
(cons 1 '(cons 2 '()))
(cons 1 '(cons 2 '(cons 3 '())))
(cons 1 '(cons 2 '(cons 3 '(cons 4 '()))))

;part 4
(define (make-rat n d) (cons n d))
(define (numer rat) (car rat))
(define (denom rat) (cadr rat))
(define (print-rat rat)
  (newline) (display (numer rat))
  (display "/") (display (denom rat)))
(define one-half (make-rat 1 (list 2)))
(define one-third (make-rat 1 (list 3)))
(display one-half)
(print-rat one-half)
(display one-third)
(print-rat one-third)

;part 5
(define (add-rat rat1 rat2)
  (make-rat (+ (* (numer rat1) (denom rat2))
               (* (numer rat2) (denom rat1)))
            (* (denom rat1) (denom rat2))))
(define (sub-rat rat1 rat2)
  (make-rat (- (* (numer rat1) (denom rat2))
               (* (numer rat2) (denom rat1)))
            (* (denom rat1) (denom rat2))))
(define (mul-rat rat1 rat2)
  (make-rat (* (numer rat1) (numer rat2))
            (* (denom rat1) (denom rat2))))
(define (div-rat rat1 rat2)
  (make-rat (* (numer rat1) (denom rat2))
            (* (denom rat1) (numer rat2))))
(define (eq-rat rat1 rat2)
  (equal? (* (numer rat1) (denom rat2)) 
                    (* (numer rat2) (denom rat1))))

;part 6
(define one-fourth (make-rat 1 (list 4)))
(define one-tenth (make-rat 1 (list 10)))
(define three-fifths (make-rat 3 (list 5)))
(define two-sevenths (make-rat 2 (list 7)))
(define eleven-twelfth (make-rat 11 (list 12)))
(define seven-eights (make-rat 7 (list 8)))
(define four-sevenths (make-rat 4 (list 7)))
(define eight-ninths (make-rat 8 (list 9)))
(define one-sixth (make-rat 1 (list 6)))
(define six-sevenths (make-rat 6 (list 7)))

;addition
(add-rat one-half one-sixth)
(add-rat seven-eights eight-ninths)
(add-rat two-sevenths three-fifths)

;subtraction
(sub-rat four-sevenths one-fourth)
(sub-rat one-third eleven-twelfth)
(sub-rat eight-ninths three-fifths)

;multiplication
(mul-rat two-sevenths eleven-twelfth)
(mul-rat seven-eights three-fifths)
(mul-rat one-third eight-ninths)

;division
(div-rat one-half four-sevenths)
(div-rat one-fourth eight-ninths)
(div-rat three-fifths eight-ninths)

;equality
(eq-rat two-sevenths three-fifths)


